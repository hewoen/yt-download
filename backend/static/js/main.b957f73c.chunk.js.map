{"version":3,"sources":["elements/api/api.js","elements/jobrow.js","elements/JobQueue.js","elements/confirmationButton.js","elements/jobForm.js","elements/loginForm.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","formatTime","timestamp","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","JobRow","props","state","render","row","window","confirm","id","callback","json","formdata","FormData","append","axios","post","then","res","data","api","this","setState","status_code","console","log","TableRow","sx","border","TableCell","ts_start","type","href","url","target","title","status","className","download_url","onClick","e","removeChild","React","Component","JobQueue","TableContainer","component","Paper","Table","minWidth","TableHead","TableBody","rows","map","ConfirmationButton","captionDisabled","captionEnabled","class","disabled","enabled","JobForm","confirmationButtonEnabled","unsetTicker","k","push","setTicker","get","ticker","setInterval","update","clearInterval","alert","concat","size","onChange","value","name","addJobButtonClicked","bind","LoginForm","password","remember","success","checked","loginButtonClicked","location","reload","Header","App","useState","loggedIn","setLoggedIn","defaults","withCredentials","useEffect","logged_in","path","element","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+QAEMA,EAAU,wC,mECShB,SAASC,EAAWC,GAChB,IAAIC,EAAO,IAAIC,KAAiB,IAAZF,GASpB,OAPIC,EAAKE,UAAY,KAChBF,EAAKG,WAAW,GAAK,IACtBH,EAAKI,cAAgB,MACrBJ,EAAKK,WAAa,IAClBL,EAAKM,aAAe,IACpBN,EAAKO,a,IAMPC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAIVC,MAAQ,CAACC,QAAS,GAHd,EAAKC,IAAM,EAAKH,MAAMG,IAFR,E,+CAOlB,WAAc,IAAD,OACOC,OAAOC,QAAQ,uCDDvC,SAAmBC,GAA0B,IAAvBC,EAAsB,uDAAb,SAACC,KACxBC,EAAW,IAAIC,SACnBD,EAASE,OAAO,KAAML,GACtBM,IAAMC,KACFzB,EAAU,oBACVqB,GACFK,MAAK,SAAAC,GAAG,OAAIR,EAASQ,EAAIC,SCHnBC,CAAcC,KAAKf,IAAIG,IAAI,kBAAM,EAAKa,SAAS,CAACjB,QAAS,S,oBAKjE,WAAS,IDjBMkB,ECiBP,OAEA,OADAC,QAAQC,IAAI,WACTJ,KAAKjB,MAAMC,OAEN,eAACqB,EAAA,EAAD,CACAC,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IADpD,UAGA,cAACC,EAAA,EAAD,UAAYrC,EAAW6B,KAAKf,IAAIwB,YAChC,cAACD,EAAA,EAAD,UAAYR,KAAKf,IAAIyB,OACrB,cAACF,EAAA,EAAD,UAAY,mBAAGG,KAAMX,KAAKf,IAAI2B,IAAKC,OAAO,SAA9B,SAAwCb,KAAKf,IAAI6B,UAC7D,cAACN,EAAA,EAAD,WD3BDN,EC2B2BF,KAAKf,IAAI8B,OD1BtC,CACT,EAAI,sBAAMC,UAAU,kBAAhB,sBACJ,EAAI,sBAAMA,UAAU,qBAAhB,yBACJ,EAAI,sBAAMA,UAAU,kBAAhB,uBAEMd,MCsBE,cAACM,EAAA,EAAD,UD9CH,GC8CeR,KAAKf,IAAI8B,OAAuB,mBAAGJ,KAAMX,KAAKf,IAAIgC,aAAlB,2BAAoD,KAChG,cAACT,EAAA,EAAD,UAAW,sBAAMU,QAAS,SAACC,GAAD,OAAO,EAAKC,eAAeJ,UAAU,aAApD,oBAKR,S,GAjCFK,IAAMC,WAyCZzC,I,ICQA0C,E,kDAzCP,WAAYzC,GAAO,uCACTA,G,0CAIV,WACI,OACI,gCACQ,uCACA,cAAC0C,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAOrB,GAAI,CAAEsB,SAAU,KAAO,aAAW,eAAzC,UACI,cAACC,EAAA,EAAD,UACA,eAACxB,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,6BACA,cAACA,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,SAGJ,cAACsB,EAAA,EAAD,UAEQ9B,KAAKlB,MAAMiD,KAAKC,KACZ,SAAA/C,GACI,OACI,cAAC,EAAD,CAAQA,IAAKA,qB,GA3B1CoC,IAAMC,WCfdW,E,kDAbX,WAAYnD,GAAO,IAAD,8BACd,cAAMA,IAFVoD,gBAAkB,iBAGd,EAAKC,eAAiB,EAAKrD,MAAMqD,eAFnB,E,0CAKlB,WAAS,IAAD,OACJ,OACI,wBAAQC,MAAM,MAAMC,UAAWrC,KAAKlB,MAAMwD,QAASlD,GAAG,cAAc8B,QAAS,kBAAM,EAAKpC,MAAMoC,WAA9F,SAA0GlB,KAAKlB,MAAMwD,QAAUtC,KAAKmC,eAAiBnC,KAAKkC,sB,GAVrIb,IAAMC,WCuHxBiB,E,kDA/GX,WAAYzD,GAAO,IAAD,8BACd,cAAMA,IAJV8B,IAAM,GAGY,EAFlBF,KAAO,GAIH,EAAK3B,MAAQ,CACXgD,KAAO,GACPnB,IAAM,GACNF,KAAO,GACP8B,2BAA4B,GANhB,E,0CAWhB,WAAS,IJDEnD,EICH,OACNW,KAAKyC,cJFIpD,EIIL,SAAAC,GACI,IAAIyC,EAAO,GACX,IAAI,IAAIW,KAAKpD,EACXyC,EAAKY,KAAKrD,EAAKoD,IAEjB,EAAKzC,SAAS,CACZ8B,KAAO,KAET,EAAK9B,SAAS,CAAC8B,KAAOA,IACtB,EAAKa,aJZjBlD,IAAMmD,IAAI3E,EAAU,oBACnB0B,MAAK,SAAAC,GAAG,OAAIR,EAASQ,EAAIC,W,uBIgB1B,WAAY,IAAD,OACPE,KAAK8C,OAASC,aAAY,kBAAM,EAAKC,WAAU,O,yBAGnD,WACIC,cAAcjD,KAAK8C,U,+BAGvB,WACI9C,KAAK4C,YACL5C,KAAKgD,W,iCAGT,WACIhD,KAAKyC,gB,iCAGP,WAAsB,IAAD,OACnB,GAAe,KAAZzC,KAAKU,KAAR,CAKA,IAAI,IAAIgC,KAAK1C,KAAKjB,MAAMgD,KACtB,GAAG/B,KAAKjB,MAAMgD,KAAKW,GAAG9B,MAAQZ,KAAKY,IAEjC,YADAsC,MAAM,sCAIVlD,KAAKyC,cACLzC,KAAKC,SAAS,CAACuC,2BAA4B,IJ3DnD,SAAgB5B,EAAKF,EAAMrB,GAEvB,IAAIE,EAAW,IAAIC,SACnBD,EAASE,OAAO,MAAOmB,GACvBrB,EAASE,OAAO,OAAQiB,GACxBhB,IAAMC,KACFzB,EAAU,iBACVqB,GACFK,MAAK,SAAAC,GAAG,OAAIR,EAASQ,EAAIC,SIoDvBC,CACEC,KAAKY,IACLZ,KAAKU,MACL,SAACpB,GAEgB,MAAZA,EAAKwB,OACNoC,MAAM,yDACN,EAAKjD,SAAS,CACZ8B,KAAO,EAAKhD,MAAMgD,KAAKoB,OAAO,CAAC7D,IAC/BkD,2BAA4B,MAG9BU,MAAM,gBAAkB,EAAKtC,KAC7B,EAAKX,SAAS,CACZuC,2BAA4B,KAGhC,EAAKI,oBA7BPM,MAAM,4B,oBAuCV,WAAS,IAAD,OACN,OACI,sBAAK9D,GAAG,UAAR,UACI,qCACA,yCACA,uBAAOsB,KAAK,OAAOtB,GAAG,MAAMgE,KAAK,MAAMC,SAAU,SAAClC,GAAD,OAAO,EAAKP,IAAMO,EAAEN,OAAOyC,YAE5E,qCACA,2DADA,QAGA,uBAAO5C,KAAK,QAAQ6C,KAAK,OAAOD,MAAM,QAAQD,SAAU,SAAClC,GAAD,OAAO,EAAKT,KAAOS,EAAEN,OAAOyC,SAHpF,QAKA,uBAAO5C,KAAK,QAAQ6C,KAAK,OAAOD,MAAM,QAAQD,SAAU,SAAClC,GAAD,OAAO,EAAKT,KAAOS,EAAEN,OAAOyC,YAEpF,cAAC,EAAD,CAAoBnB,eAAe,mBAAmBG,QAAStC,KAAKjB,MAAMyD,0BAA2BtB,QAASlB,KAAKwD,oBAAoBC,KAAKzD,QAC5I,uBAEA,cAAC,EAAD,CAAU+B,KAAM/B,KAAKjB,MAAMgD,c,GA3GrBV,IAAMC,W,eCmDboC,G,wDAhDX,WAAY5E,GAAO,IAAD,8BACd,cAAMA,IAHV6E,SAAW,GAIP,EAAK5E,MAAQ,CACXyD,2BAA4B,EAC5BoB,UAAW,EACXC,SAAU,GALE,E,sDAUhB,WAAqB,IAAD,OAClB7D,KAAKC,SAAS,CACZuC,2BAA4B,IL4BtC,SAAemB,EAASC,EAAUvE,GAC9B,IAAIE,EAAW,IAAIC,SACnBD,EAASE,OAAO,WAAYkE,GAC5BpE,EAASE,OAAO,WAAYmE,EAAW,OAAS,SACzClE,IAAMC,KACTzB,EAAU,gBACVqB,GACFK,MACE,SAAAC,GAAQ,OAAOR,EAASQ,EAAIC,SKlC5BC,CAAUC,KAAK2D,SAAU3D,KAAKjB,MAAM6E,UAAU,SAAAtE,GACzCA,EAAKuE,QACN,EAAK5D,SAAS,CAAC4D,SAAU,KAGzBX,MAAM,mBACN,EAAKjD,SAAS,CAACuC,2BAA4B,U,oBAOjD,WAAS,IAAD,OACN,IAAIxC,KAAKjB,MAAM8E,QACb,OACI,qBAAKzE,GAAG,YAAR,SACI,qCACA,8CACA,uBAAOsB,KAAK,WAAW0C,KAAK,KAAKC,SAAU,SAAClC,GAAD,OAAO,EAAKwC,SAAWxC,EAAEN,OAAOyC,SAAQ,uBAFnF,cAIA,uBAAO5C,KAAK,WAAWoD,QAAS9D,KAAKjB,MAAM6E,SAAU1C,QAAS,SAACC,GAAD,OAAO,EAAKlB,SAAS,CAAC2D,UAAY,EAAK7E,MAAM6E,cAAc,uBACzH,cAAC,EAAD,CAAoBzB,eAAe,QAAQG,QAAStC,KAAKjB,MAAMyD,0BAA2BtB,QAASlB,KAAK+D,mBAAmBN,KAAKzD,aAMzId,OAAO8E,SAASC,a,GA7CD5C,IAAMC,YCK9B,SAAS4C,IACP,OACA,qBAAK9E,GAAG,SAAR,SACE,iDA+BW+E,MA1Bf,WACE,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KASA,OARA5E,IAAM6E,SAASC,iBAAkB,EAEjCC,qBAAU,WNoBZ,IAAoBpF,IMlBd,SAACQ,GAASyE,EAAYzE,EAAI6E,YNmB/BhF,IAAMmD,IAAI3E,EAAU,sBAAsB0B,MACnC,SAAAC,GAAG,OAAIR,EAASQ,EAAIC,WMlBvB,IAGD,sBAAKkB,UAAU,MAAf,UACE,cAACkD,EAAD,IACA,qBAAK9E,GAAG,OAAR,SACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuF,KAAK,IAAIC,QAAWP,EAA2C,cAAC,EAAD,IAAhC,cAAC,IAAD,CAAU1B,MAAI,EAACkC,GAAG,aACxD,cAAC,IAAD,CAAOF,KAAK,SAASC,QAASP,EAAW,cAAC,IAAD,CAAU1B,MAAI,EAACkC,GAAG,MAAS,cAAC,EAAD,iBCvB/DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpF,MAAK,YAAkD,IAA/CqF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAStG,OACP,cAAC,IAAMuG,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b957f73c.chunk.js","sourcesContent":["import axios, { Axios } from \"axios\";\nimport React from \"react\";\nconst baseURL = \"https://yt-download.woenne.de/api.php\";\n\nconst IN_QUEUE = 1;\nconst IN_PROGRESS = 2;\nconst FINISHED = 3;\n\nfunction addJob(url, type, callback)\n{\n    let formdata = new FormData();\n    formdata.append(\"url\", url);\n    formdata.append(\"type\", type);\n    axios.post(\n        baseURL + \"?action=addJob\",\n        formdata\n    ).then(res => callback(res.data));\n}\n\nfunction getJobs(callback){\n    axios.get(baseURL + \"?action=getQueue\")\n    .then(res => callback(res.data));\n}\n\nfunction getStatus(status_code){\n    let status = {\n        1 : <span className=\"status-in-queue\">In queue</span>,\n        2 : <span className=\"status-in-progress\">In progress</span>,\n        3 : <span className=\"status-finished\">Finished</span>\n    }\n    return status[status_code];\n}\n\nfunction removeJob(id,callback=(json) => {}){\n    let formdata = new FormData();\n    formdata.append(\"id\", id);\n    axios.post(\n        baseURL + \"?action=removeJob\",\n        formdata\n    ).then(res => callback(res.data));\n}\n\nfunction checkLogin(callback){\n axios.get(baseURL + \"?action=checkLogin\").then(\n        res => callback(res.data)\n    );\n}\n\nfunction login(password,remember, callback){\n    let formdata = new FormData();\n    formdata.append(\"password\", password);\n    formdata.append(\"remember\", remember ? \"true\" : \"false\");\n    return axios.post(\n        baseURL + \"?action=login\",\n        formdata\n    ).then(\n        res => {return callback(res.data)}\n    );\n}\n\nexport {addJob,getStatus,getJobs,removeJob,checkLogin,login,IN_QUEUE,IN_PROGRESS,FINISHED}","import React from \"react\";\nimport * as api from './api/api';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { Tab } from \"@mui/material\";\n\nfunction formatTime(timestamp){\n    let date = new Date(timestamp * 1000);\n    let formatedDate =\n        date.getDate() + \".\" +\n        (date.getMonth()+1) + \".\" +\n        date.getFullYear() + \" - \" +\n        date.getHours() + \":\" +\n        date.getMinutes() + \":\" +\n        date.getSeconds()\n        ;\n    return formatedDate;\n\n}\n\nclass JobRow extends React.Component{\n    constructor(props){\n        super(props);\n        this.row = this.props.row;\n    }    \n\n    state = {render : true};\n\n    removeChild(){\n        let confirmed = window.confirm(\"Do you realy want remove this job?\");\n        if(confirmed){\n            api.removeJob(this.row.id, () => this.setState({render : false }));\n        }\n    }\n\n\n    render(){\n            console.log(\"Job Row\");\n            if(this.state.render){\n                return(\n                    <TableRow\n                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                    <TableCell>{formatTime(this.row.ts_start)}</TableCell>\n                    <TableCell>{this.row.type}</TableCell>\n                    <TableCell>{<a href={this.row.url} target=\"_blank\">{this.row.title}</a>}</TableCell>\n                    <TableCell>{api.getStatus(this.row.status)}</TableCell>\n                    <TableCell>{this.row.status==api.FINISHED ? <a href={this.row.download_url}>Download here</a> : \"\"}</TableCell>\n                    <TableCell><span onClick={(e) => this.removeChild()} className=\"btn-remove\">x</span></TableCell>\n                    </TableRow>\n                );\n            }\n            else{\n                return null;\n            }\n    }\n\n\n\n}\n\nexport default JobRow;","import React from \"react\";\nimport * as api from './api/api';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { Tab } from \"@mui/material\";\nimport JobRow from \"./jobrow\";\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n  }\n\n\nfunction formatTime(timestamp){\n    let date = new Date(timestamp * 1000);\n    let formatedDate =\n        date.getDate() + \".\" +\n        (date.getMonth()+1) + \".\" +\n        date.getFullYear() + \" - \" +\n        date.getHours() + \":\" +\n        date.getMinutes() + \":\" +\n        date.getSeconds()\n        ;\n    return formatedDate;\n\n}\n\n\nclass JobQueue extends React.Component{\n        constructor(props){\n            super(props);\n        }\n\n\n        render(){\n            return(\n                <div>\n                        <h2>Queue</h2>\n                        <TableContainer component={Paper}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                <TableRow>\n                                    <TableCell>Start</TableCell>\n                                    <TableCell>Type</TableCell>\n                                    <TableCell>Title</TableCell>\n                                    <TableCell>Current status</TableCell>\n                                    <TableCell></TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        this.props.rows.map(\n                                            row => {\n                                                return(\n                                                    <JobRow row={row} />\n                                                );\n                                            }\n                                        )\n                                    }\n                                </TableBody>\n                            </Table>\n                            </TableContainer>\n                            \n\n    </div>\n            );\n    }\n}\n\nexport default JobQueue;","import React from \"react\";\nclass ConfirmationButton extends React.Component{\n\n    captionDisabled = \"In Progress...\";\n    constructor(props){\n        super(props);\n        this.captionEnabled = this.props.captionEnabled;\n    }\n\n    render(){\n        return(\n            <button class=\"btn\" disabled={!this.props.enabled} id=\"btn_confirm\" onClick={() => this.props.onClick()}>{this.props.enabled ? this.captionEnabled : this.captionDisabled}</button>\n        );\n        }\n\n}\n\nexport default ConfirmationButton","import React from 'react';\nimport JobQueue from './JobQueue';\nimport * as api from './api/api';\nimport ConfirmationButton from './confirmationButton';\n\nclass JobForm extends React.Component{\n    url = \"\";\n    type = \"\";\n\n    constructor(props){\n        super(props);\n        this.state = {\n          rows : [],\n          url : \"\",\n          type : \"\",\n          confirmationButtonEnabled : true\n        }\n        \n      }\n\n      update(){\n        this.unsetTicker();\n        api.getJobs(\n            json => {\n                let rows = [];\n                for(var k in json){\n                  rows.push(json[k]);\n                }\n                this.setState({\n                  rows : []\n                });\n                this.setState({rows : rows});\n                this.setTicker();\n            }\n        )\n    }\n\n    setTicker(){\n        this.ticker = setInterval(() => this.update(), 10000);\n    }\n\n    unsetTicker(){\n        clearInterval(this.ticker);\n    }\n\n    componentDidMount(){\n        this.setTicker();\n        this.update();\n    }\n\n    componentDidUnmount(){\n        this.unsetTicker();\n    }\n\n      addJobButtonClicked(){\n        if(this.type===\"\"){\n          alert(\"Please select a format\");\n          return ;\n        }\n\n        for(var k in this.state.rows){\n          if(this.state.rows[k].url === this.url){\n            alert(\"This clip is aleady in your queue!\");\n            return ;\n          }\n        }\n        this.unsetTicker();\n        this.setState({confirmationButtonEnabled : false});\n        api.addJob(\n          this.url,\n          this.type,\n          (json) => \n          { \n            if(json.title!=null){\n              alert(\"The download job was added sucessfully to your queue.\"); \n              this.setState({\n                rows : this.state.rows.concat([json]),\n                confirmationButtonEnabled : true});\n            }\n            else{\n              alert(\"Invalid URL: \" + this.url);\n              this.setState({\n                confirmationButtonEnabled : true\n              });\n            }\n            this.setTicker();\n          \n          }\n        )\n       \n        \n      }\n\n\n    \n      render(){\n        return(\n            <div id=\"jobForm\">\n                <fieldset>\n                <legend>URL</legend>\n                <input type=\"text\" id=\"url\" size=\"100\" onChange={(e) => this.url = e.target.value}/>\n                </fieldset>\n                <fieldset>\n                <legend>Gewünschtes Format</legend>\n                Audio \n                <input type=\"radio\" name=\"type\" value=\"audio\" onChange={(e) => this.type = e.target.value} />\n                Video \n                <input type=\"radio\" name=\"type\" value=\"video\" onChange={(e) => this.type = e.target.value} />\n                </fieldset>\n                <ConfirmationButton captionEnabled=\"Add job to queue\" enabled={this.state.confirmationButtonEnabled} onClick={this.addJobButtonClicked.bind(this)} />\n                <hr />\n\n                <JobQueue rows={this.state.rows} />\n\n            </div>\n        );\n    }\n      \n}\n\nexport default JobForm;","import React from 'react';\nimport { BrowserRouter as Router , Routes, Route, Navigate } from 'react-router-dom';\nimport * as api from './api/api';\nimport ConfirmationButton from './confirmationButton';\n\nclass LoginForm extends React.Component{\n    password = \"\";\n    \n    constructor(props){\n        super(props);\n        this.state = {\n          confirmationButtonEnabled : true,\n          remember : true,\n          success : false\n        }\n        \n      }\n\n      loginButtonClicked(){\n        this.setState({\n          confirmationButtonEnabled : false\n        });\n        api.login(this.password, this.state.remember, json => {\n          if(json.success){\n            this.setState({success : true})\n          }\n          else{\n            alert(\"Wrong password!\");\n            this.setState({confirmationButtonEnabled : true});\n          }\n        });\n\n      }\n\n    \n      render(){\n        if(!this.state.success){\n          return(\n              <div id=\"loginForm\">\n                  <fieldset>\n                  <legend>Password</legend>\n                  <input type=\"password\" size=\"20\" onChange={(e) => this.password = e.target.value}/><br/>\n                  Remember me \n                  <input type=\"checkbox\" checked={this.state.remember} onClick={(e) => this.setState({remember : !this.state.remember})} /><br/>\n                  <ConfirmationButton captionEnabled=\"Login\" enabled={this.state.confirmationButtonEnabled} onClick={this.loginButtonClicked.bind(this)} />\n                  </fieldset>\n              </div>\n          );\n        }\n        else{\n         window.location.reload();\n        }\n    }\n      \n}\n\nexport default LoginForm;","import JobForm from './elements/jobForm';\nimport axios from 'axios';\nimport { BrowserRouter as Router , Routes, Route, Navigate } from 'react-router-dom';\nimport * as api from './elements/api/api';\nimport './App.css';\nimport LoginForm from './elements/loginForm';\nimport { useEffect,useState } from 'react';\n\n\n\nfunction Header(){\n  return(\n  <div id=\"header\">\n    <h1>YT-Downloader</h1>\n  </div>\n  );\n}\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(null)\n  axios.defaults.withCredentials = true;  \n\n  useEffect(() => {\n    api.checkLogin(\n      (res) => {setLoggedIn(res.logged_in)}\n    )\n  }, [] );\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div id=\"main\">\n      <Router>\n        <Routes>\n          <Route path='/' element={ !loggedIn ? <Navigate push to=\"/login\" /> : <JobForm />}></Route>\n          <Route path='/login' element={loggedIn ? <Navigate push to=\"/\" /> : <LoginForm />}></Route>\n        </Routes>\n      </Router>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}